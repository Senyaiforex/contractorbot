import asyncio
from contextlib import suppress
import os
from pathlib import Path

from aiogram.utils.media_group import MediaGroupBuilder
from models import StatusEnum
from handlers.states import RegStates, ServiceState, OrderCreateState
from utils import admin_text, user_text
from utils.helpers import create_services_text, text_service_admins, create_services_admin_text, text_services_contr, \
    create_text_order, create_text_detail_order
from aiogram import Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, FSInputFile, InputMediaPhoto, InputMediaDocument, InputFile
from keyboards import main_menu_admin, main_menu_contractors, services_menu, up_balance_vars, list_services_menu, \
    add_service_keyboard, delete_service_keyboard, admin_service_menu, delete_service_admin, back_but, \
    finish_order_keyboard, offer_order, after_order_keyboard, payment_keyboard, orders_keyboard, order_detail_keyboard, \
    orders_select_keyboard
from repositories import ServiceRepository, ContractRepository, OrderRepository
from utils.payment import create_url_payment
import logging

list_admins = [272513813]
router = Router()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


@router.callback_query(lambda c: c.data == 'menu')
async def main_menu(callback_query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É ¬´–ú–µ–Ω—é¬ª
    :param callback_query: CallbackQuery
    :param state: FSMContext
    :return:
    """
    await state.clear()
    user_id = callback_query.from_user.id
    if user_id in list_admins:
        await callback_query.message.edit_text(text=admin_text.text_start,
                                               reply_markup=await main_menu_admin())
    else:
        contractor = await ContractRepository.get_contractor_by_id(user_id)
        reg = True if contractor else False
        text = user_text.text_start if not reg else user_text.text_constr.format(fio=contractor.full_name,
                                                                                 balance=contractor.balance,
                                                                                 number=contractor.number_phone,
                                                                                 city=contractor.city)
        await callback_query.message.edit_text(text=text,
                                               reply_markup=await main_menu_contractors(reg))


@router.callback_query(lambda c: c.data == 'registration')
async def registration(callback_query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É ¬´–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è¬ª
    :param callback_query: CallbackQuery
    :param state: FSMContext
    :return:
    """
    await callback_query.message.delete()
    text = user_text.fio_question
    await callback_query.message.answer(
            text=text,
            parse_mode='Markdown'
    )
    await state.set_state(RegStates.FULL_NAME)


@router.callback_query(lambda c: c.data == 'my_services')
async def my_services(callback_query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É ¬´–ú–æ–∏ —É—Å–ª—É–≥–∏¬ª
    :param callback_query: CallbackQuery
    :param state: FSMContext
    :return:
    """
    user_id = callback_query.from_user.id
    services = await ServiceRepository.get_services_by_contractor(user_id)
    text = await create_services_text(services)
    await callback_query.message.edit_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=await services_menu()
    )


@router.callback_query(lambda c: c.data == 'list_services')
async def my_services(callback_query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É ¬´–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥¬ª
    :param callback_query: CallbackQuery
    :param state: FSMContext
    :return:
    """
    services = await ServiceRepository.get_all_services()
    text = await create_services_admin_text(services)
    await callback_query.message.edit_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=await admin_service_menu()
    )


@router.callback_query(lambda c: c.data == 'my_orders')
async def my_orders(callback_query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É ¬´–ú–æ–∏ –∑–∞–∫–∞–∑—ã¬ª
    :param callback_query: CallbackQuery
    :param state: FSMContext
    :return:
    """
    orders = await OrderRepository.get_orders_by_user(callback_query.from_user.id, 'all')
    if not orders:
        await callback_query.answer("–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç")
        return
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–∏–ø –∑–∞–∫–∞–∑–∞"
    keyboard = await orders_keyboard()
    await callback_query.message.edit_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data == 'up_balance')
async def up_balance(callback_query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É ¬´–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å¬ª
    :param callback_query: CallbackQuery
    :param state: FSMContext
    :return:
    """
    await callback_query.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è üíµ",
            parse_mode='Markdown',
            reply_markup=await up_balance_vars()
    )


@router.callback_query(lambda c: c.data.startswith('pay_'))
async def payment_callback(callback_query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    :param callback_query: CallbackQuery
    :param state: FSMContext
    :return:
    """
    price = float(callback_query.data.split('_')[1])
    await callback_query.message.delete()
    link_pay = await create_url_payment(callback_query.from_user.id, 20)
    keyboard = await payment_keyboard(link_pay)
    await callback_query.message.answer(
            text="–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å.\n"
                 "–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –º—ã –æ–ø–æ–≤–µ—Å—Ç–∏–º –í–∞—Å, —á—Ç–æ –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω",
            parse_mode='Markdown',
            reply_markup=keyboard
    )


# @router.callback_query(lambda c: c.data.startswith('service_'))
# async def services_processing(callback_query: CallbackQuery, state: FSMContext):
#     """
#     –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É ¬´–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É¬ª –∏–ª–∏ ¬´–£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É¬ª
#     :param callback_query: CallbackQuery
#     :param state: FSMContext
#     :return:
#     """
#     dict_actions = {'add': "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–∞ —Ä–∞–±–æ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è",
#                     'del': "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"}
#     type_action = callback_query.data.split('_')[1]
#     text = dict_actions[type_action]
#     await callback_query.message.delete()
#     if type_action == 'add':
#         await callback_query.message.answer(
#                 text=text,
#                 parse_mode='Markdown',
#         )
#     else:
#         await callback_query.message.answer(
#                 text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
#                 parse_mode='Markdown',
#                 reply_markup=await services_menu()
#         )


@router.callback_query(lambda c: c.data.startswith('adding_service_'))
async def services_add_processing(callback_query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –æ–∫–∞–∑—ã–≤–∞–µ–º—ã—Ö —É—Å–ª—É–≥ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
    :param callback_query: CallbackQuery
    :param state: FSMContext
    :return:
    """
    id_service = callback_query.data.split('_')[2]
    service, user, services = await asyncio.gather(ServiceRepository.get_service_by_id(int(id_service)),
                                                   ContractRepository.add_service(callback_query.from_user.id,
                                                                                  int(id_service)),
                                                   ServiceRepository.get_all_services())
    await callback_query.answer(f"–£—Å–ª—É–≥–∞ {service.name} –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    services_user = await ServiceRepository.get_services_by_contractor(callback_query.from_user.id)
    services_user = [service.id for service in services_user]
    services = [service_req for service_req in services if service_req.id not in services_user]
    text = await text_services_contr(services)
    keyboard = await list_services_menu(services)
    await callback_query.message.edit_text(text=text, reply_markup=keyboard, parse_mode='Markdown')


@router.callback_query(lambda c: c.data.startswith('ready_reg'))
async def end_registration(callback_query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É –ì–æ—Ç–æ–≤–æ –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    :param callback_query: CallbackQuery
    :param state: FSMContext
    :return:
    """
    text = user_text.reg_finish
    await state.clear()
    await callback_query.message.edit_text(text,
                                           reply_markup=await main_menu_contractors(True),
                                           parse_mode='Markdown')


@router.callback_query(lambda c: c.data.startswith('service_add'))
async def service_add_processing(callback_query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É –ì–æ—Ç–æ–≤–æ –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    :param callback_query: CallbackQuery
    :param state: FSMContext
    :return:
    """
    service_user, services = await asyncio.gather(
            ServiceRepository.get_services_by_contractor(callback_query.from_user.id),
            ServiceRepository.get_all_services())
    services_user = [service.id for service in service_user]
    services = [service_req for service_req in services if service_req.id not in services_user]
    text = await text_services_contr(services)
    await callback_query.message.edit_text(text, reply_markup=await add_service_keyboard(services),
                                           parse_mode='Markdown')


@router.callback_query(lambda c: c.data.startswith('add-new-service'))
async def service_add_new(callback_query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É –ì–æ—Ç–æ–≤–æ –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    :param callback_query: CallbackQuery
    :param state: FSMContext
    :return:
    """
    id_service = callback_query.data.split('_')[1]
    service, user = await asyncio.gather(ServiceRepository.get_service_by_id(int(id_service)),
                                         ContractRepository.add_service(callback_query.from_user.id,
                                                                        int(id_service)))
    await callback_query.answer(f"–£—Å–ª—É–≥–∞ {service.name} –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    service_user, services = await asyncio.gather(
            ServiceRepository.get_services_by_contractor(callback_query.from_user.id),
            ServiceRepository.get_all_services())
    services_user = [service.id for service in service_user]
    services = [service_req for service_req in services if service_req.id not in services_user]
    text = await text_services_contr(services)
    await callback_query.message.edit_text(text=text, reply_markup=await add_service_keyboard(services),
                                           parse_mode='Markdown')


@router.callback_query(lambda c: c.data.startswith('service_del'))
async def service_del_processing(callback_query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É –ì–æ—Ç–æ–≤–æ –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    :param callback_query: CallbackQuery
    :param state: FSMContext
    :return:
    """
    service_user = await ServiceRepository.get_services_by_contractor(callback_query.from_user.id)
    text = await text_services_contr(service_user)
    await callback_query.message.edit_text(text, reply_markup=await delete_service_keyboard(service_user),
                                           parse_mode='Markdown')


@router.callback_query(lambda c: c.data.startswith('delete-service'))
async def service_del_old(callback_query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É –ì–æ—Ç–æ–≤–æ –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    :param callback_query: CallbackQuery
    :param state: FSMContext
    :return:
    """
    id_service = callback_query.data.split('_')[1]
    service, user = await asyncio.gather(ServiceRepository.get_service_by_id(int(id_service)),
                                         ContractRepository.del_service(callback_query.from_user.id,
                                                                        int(id_service)))
    await callback_query.answer(f"–£—Å–ª—É–≥–∞ {service.name} —É–¥–∞–ª–µ–Ω–∞")
    service_user = await ServiceRepository.get_services_by_contractor(callback_query.from_user.id)
    text = await text_services_contr(service_user)
    await callback_query.message.edit_text(text=text, reply_markup=await delete_service_keyboard(service_user),
                                           parse_mode='Markdown')


@router.callback_query(lambda c: c.data == 'delete_service')
async def service_del_admin_processing(callback_query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É –ì–æ—Ç–æ–≤–æ –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    :param callback_query: CallbackQuery
    :param state: FSMContext
    :return:
    """
    services = await ServiceRepository.get_all_services()
    text = await text_services_contr(services)
    await callback_query.message.edit_text(text, reply_markup=await delete_service_admin(services),
                                           parse_mode='Markdown')


@router.callback_query(lambda c: c.data == 'update_service')
async def service_add_admin_processing(callback_query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É –ì–æ—Ç–æ–≤–æ –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    :param callback_query: CallbackQuery
    :param state: FSMContext
    :return:
    """
    await callback_query.message.delete()
    text = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏"
    await callback_query.message.answer(text)
    await state.set_state(ServiceState.NAME_SERVICE)


@router.callback_query(lambda c: c.data.startswith('admin-delete-service'))
async def service_admin_delete(callback_query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É –ì–æ—Ç–æ–≤–æ –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    :param callback_query: CallbackQuery
    :param state: FSMContext
    :return:
    """
    id_service = callback_query.data.split('_')[1]
    service = await ServiceRepository.get_service_by_id(int(id_service))
    await ServiceRepository.del_service_admin(int(id_service))
    services = await ServiceRepository.get_all_services()
    text = await text_services_contr(services)
    await callback_query.answer(f"–£—Å–ª—É–≥–∞ {service.name} —É–¥–∞–ª–µ–Ω–∞")
    await callback_query.message.edit_text(text=text, reply_markup=await delete_service_admin(services),
                                           parse_mode='Markdown')


@router.callback_query(lambda c: c.data.startswith('add_order'))
async def add_order(callback_query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É ¬´–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑¬ª
    :param callback_query: CallbackQuery
    :param state: FSMContext
    :return:
    """
    await callback_query.message.delete()
    text = admin_text.name_order
    await callback_query.message.answer(text)
    await state.set_state(OrderCreateState.text_order)


@router.callback_query(lambda c: c.data.startswith('add-in-order'))
async def add_service_in_order(callback_query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É ¬´–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É –≤ –∑–∞–∫–∞–∑¬ª
    :param callback_query: CallbackQuery
    :param state: FSMContext
    :return:
    """
    _, order_id, service_id = callback_query.data.split('_')
    await callback_query.message.delete()
    await OrderRepository.add_service_to_order(int(order_id), int(service_id))
    order = await OrderRepository.get_order_by_id(int(order_id))
    text = order.description + "\n\n" + f"–£—Å–ª—É–≥–∞ - {order.service.name}"
    media_group = MediaGroupBuilder(caption=text)
    if order.photo_path:
        files_list = order.photo_path.split('\n')
        for path_file in files_list[:len(files_list) - 1]:
            if path_file:
                if files_list[0].split('.')[1].lower() in ['jpeg', 'png', 'jpg', 'svg', 'gif', 'raw', 'tiff']:
                    media = FSInputFile(path_file)
                    media_group.add_photo(media=media)
                else:
                    media = FSInputFile(path_file)
                    media_group.add_document(media=media)
        await callback_query.message.answer_media_group(media=media_group.build())
    else:
        await callback_query.message.answer(text)
    keyboard = await finish_order_keyboard(order.id)
    await callback_query.message.answer("–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –∏ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤?", reply_markup=keyboard)
    await state.clear()


@router.callback_query(lambda c: c.data.startswith('edit_text'))
async def text_in_order_change(callback_query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É '–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç'
    :param callback_query: CallbackQuery
    :param state: FSMContext
    :return:
    """
    id_order = int(callback_query.data.split('_')[2])
    await state.update_data(order_id=id_order)
    text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞"
    await callback_query.message.delete()
    await callback_query.message.answer(text)
    await state.set_state(OrderCreateState.edit_text_order)


@router.callback_query(lambda c: c.data.startswith('finish_order_'))
async def finish_create_order(callback_query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É ¬´–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑¬ª
    :param callback_query: CallbackQuery
    :param state: FSMContext
    :return:
    """
    order_id = callback_query.data.split('_')[2]
    order = await OrderRepository.get_order_by_id(int(order_id))
    text = order.description + "\n\n" + f"–£—Å–ª—É–≥–∞ - {order.service.name}"
    media_group = MediaGroupBuilder(caption=text)
    await callback_query.message.delete_reply_markup()
    if order.photo_path:
        files_list = order.photo_path.split('\n')
        for path_file in files_list[:len(files_list) - 1]:
            if path_file:
                if files_list[0].split('.')[1].lower() in ['jpeg', 'png', 'jpg', 'svg', 'gif', 'raw', 'tiff']:
                    media = FSInputFile(path_file)
                    media_group.add_photo(media=media)
                else:
                    media = FSInputFile(path_file)
                    media_group.add_document(media=media)
    await callback_query.message.answer("–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω. –í—Å–µ –ø–æ–¥—Ä—è–¥—á–∏–∫–∏ –±—É–¥—É—Ç –æ–ø–æ–≤–µ—â–µ–Ω—ã", reply_markup=back_but)
    contractors = await ContractRepository.get_contractors_for_order(order.service.id)
    await state.clear()
    for contractor in contractors:
        keyboard = await offer_order(contractor.id_telegram, order.id)
        text_for_user = user_text.text_order if not contractor.free_try else user_text.text_order_try
        if order.photo_path:
            await callback_query.bot.send_media_group(contractor.id_telegram, media=media_group.build())
            await callback_query.bot.send_message(chat_id=contractor.id_telegram,
                                                  text=text_for_user,
                                                  reply_markup=keyboard,
                                                  parse_mode='Markdown')
        else:
            await callback_query.bot.send_message(chat_id=contractor.id_telegram,
                                                  text=text)
            await callback_query.bot.send_message(chat_id=contractor.id_telegram,
                                                  text=text_for_user,
                                                  reply_markup=keyboard,
                                                  parse_mode='Markdown')


@router.callback_query(lambda c: c.data.startswith('yes-offer-order'))
async def yes_order_offer(callback_query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É ¬´–í–∑—è—Ç—å –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É¬ª
    :param callback_query: CallbackQuery
    :param state: FSMContext
    :return:
    """
    _, user_id, order_id = callback_query.data.split('_')
    order, user = await asyncio.gather(OrderRepository.get_order_by_id(int(order_id)),
                                       ContractRepository.get_contractor_by_id(int(user_id)))
    await callback_query.message.delete_reply_markup()
    if order.user_telegram:
        await callback_query.message.edit_text(text="–ó–∞–∫–∞–∑ –≤–∑—è–ª –¥—Ä—É–≥–æ–π –ø–æ–¥—Ä—è–¥—á–∏–∫\n\n"
                                                    "–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∑–∞–∫–∞–∑ –±—ã—Å—Ç—Ä–µ–µ",
                                               reply_markup=back_but)
        return
    if user.free_try:
        await callback_query.message.answer("–í—ã –≤–∑—è–ª–∏ –ø—Ä–æ–±–Ω—ã–π –∑–∞–∫–∞–∑!\n"
                                            "–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –≤–∑—è—Ç—å –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å 100—Ä.\n"
                                            "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, –∏–Ω–∞—á–µ –í–∞–º –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö!\n\n"
                                            "–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º:\n"
                                            f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {order.client_phone}, –ò–º—è - {order.client_name}",
                                            reply_markup=await after_order_keyboard())
        await ContractRepository.update_contractor(callback_query.from_user.id, {"free_try": False})
    else:
        await ContractRepository.decrease_balance(callback_query.from_user.id, 100)
        await callback_query.message.answer("–í—ã –≤–∑—è–ª–∏ –∑–∞–∫–∞–∑!\n"
                                            "–° –í–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ 100—Ä.\n\n"
                                            "–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º:\n"
                                            f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {order.client_phone}, –ò–º—è - {order.client_name}",
                                            reply_markup=await after_order_keyboard())
    await OrderRepository.add_user_in_order(order.id, user.id_telegram)

    for manager_id in list_admins:
        text = (f"*{user.full_name}* @{user.user_name} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç\n\n"
                f"{order.description}\n\n"
                f"–£—Å–ª—É–≥–∞ - {order.service.name}")
        await callback_query.bot.send_message(chat_id=manager_id, text=text, parse_mode="Markdown")


@router.callback_query(lambda c: c.data.startswith('no-offer-order'))
async def yes_order_offer(callback_query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É ¬´–í–∑—è—Ç—å –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É¬ª
    :param callback_query: CallbackQuery
    :param state: FSMContext
    :return:
    """
    await callback_query.message.delete_reply_markup()
    await callback_query.message.edit_text(text="–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞\n\n"
                                                "–°–∫–æ—Ä–æ –±—É–¥—É—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–∫–∞–∑—ã, –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ! –í–¥—Ä—É–≥ –æ–Ω–∏ –í–∞–º –ø–æ–¥–æ–π–¥—É—Ç",
                                           reply_markup=back_but)
    return


@router.callback_query(lambda c: c.data == 'active_orders')
async def my_active_orders(callback_query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É ¬´–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã¬ª
    :param callback_query: CallbackQuery
    :param state: FSMContext
    :return:
    """
    orders = await OrderRepository.get_orders_by_user(callback_query.from_user.id,
                                                      'active')
    if not orders:
        await callback_query.answer("–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç")
        return
    text = "–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"
    keyboard = await orders_select_keyboard(orders)
    await callback_query.message.edit_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=keyboard
    )

@router.callback_query(lambda c: c.data == 'completed_orders')
async def my_completed_orders(callback_query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É ¬´–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã¬ª
    :param callback_query: CallbackQuery
    :param state: FSMContext
    :return:
    """
    orders = await OrderRepository.get_orders_by_user(callback_query.from_user.id,
                                                      'completed')
    if not orders:
        await callback_query.answer("–°–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç")
        return
    text = "–°–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"
    keyboard = await orders_select_keyboard(orders)
    await callback_query.message.edit_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data.startswith('detail_order_'))
async def detail_order(callback_query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É ¬´–ó–∞–∫–∞–∑¬ª
    :param callback_query: CallbackQuery
    :param state: FSMContext
    :return:
    """
    order_id = int(callback_query.data.split('_')[2])
    order = await OrderRepository.get_order_by_id(int(order_id))
    text = await create_text_detail_order(order)
    keyboard = await order_detail_keyboard(order_id, order.status.name)
    await callback_query.message.edit_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data.startswith('order-status-edit'))
async def change_status_order(callback_query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É ¬´‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω¬ª
    :param callback_query: CallbackQuery
    :param state: FSMContext
    :return:
    """
    order_id = int(callback_query.data.split('_')[1])
    await callback_query.answer("–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω—ë–Ω")
    await OrderRepository.update_data_order(order_id, {"status": StatusEnum.completed})
    await my_completed_orders(callback_query, state)